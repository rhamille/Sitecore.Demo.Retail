@*//-----------------------------------------------------------------------
    // Copyright 2016 Sitecore Corporation A/S
    // Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
    // except in compliance with the License. You may obtain a copy of the License at
    //       http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software distributed under the
    // License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
    // either express or implied. See the License for the specific language governing permissions
    // and limitations under the License.
    // -------------------------------------------------------------------------------------------*@
@using Sitecore.Feature.Commerce.Catalog.Website.Extensions
@using Sitecore.Foundation.Commerce.Website.Extensions
@using Sitecore.Feature.Commerce.Catalog.Website.Models
@model Sitecore.Feature.Commerce.Catalog.Website.Models.ProductViewModel
@{
    if (Model == null)
    {
        return;
    }
}

<div id="C11-ProductInformation" class="m-b-1">
    <h1 id="title">@Html.Sitecore().Field(Model.TitleFieldName, Model.Item)</h1>
    <p id="description">@Model.DescriptionRender - Kit</p>
    <div class="col-md-12 col-xs-12">
        <div class="features" id="features">
            @Model.RenderFeatures()
        </div>
    </div>

    <div id="price-info" class="m-b-1">
        <div id="priceWithSavings">
            <h3 class="price-now">
                <span id="priceNow" data-bind="text: priceNow"></span>
                <span class="savings" id="savings" data-bind="text: savingsMessage"></span>
            </h3>
            <del class="price-before text-muted" id="price-before" data-bind="text: priceBefore"></del>
        </div>
        <div id="priceOnly">
            <h3 class="price-now" id="price" data-bind="text: priceNow"></h3>
        </div>
    </div>

    <input type="hidden" value="@Model.ProductId" id="product-id"/>
    <input type="hidden" value="@Model.CatalogName" id="product-catalog"/>
    <div class="stock-info m-b-1" id="stock-info">
        <div>
            <span id="stockStatus">
                <strong data-bind="text: selectedStockInfo().status"></strong>
            </span>
            / <span id="stockCount" data-bind="text:selectedStockInfo().count"></span>
            <!-- ko if: selectedStockInfo().showSingleLabel -->
            <label id="stockCountLabel">@Html.Sitecore().Text("/Catalog/Product Information/Item In Stock", "item")</label>
            <!-- /ko -->
            <!-- ko ifnot: selectedStockInfo().showSingleLabel -->
            <label id="stockCountLabel">@Html.Sitecore().Text("/Catalog/Product Information/Items In Stock", "items")</label>
            <!-- /ko -->
            <!-- ko if: selectedStockInfo().availabilityDate -->
            / <span id="stockAvailabilityDate" data-bind="text: selectedStockInfo().availabilityDate"></span>
            <!-- /ko -->
        </div>
        <a id="signForStockNotification" data-toggle="modal" data-target="#signForNotificationModal" title="@Html.Sitecore().Text("/Catalog/Product Information/Sign Up For Notification Tooltip", "Get a notification when the product is back in stock")" data-bind="visible: selectedStockInfo().showSignUpForNotification">
            @Html.Sitecore().Text("/Catalog/Product Information/Sign Up For Notification Link", "Get a notification when the product is back in stock")
        </a>
    </div>

    @if (Model.Variants != null)
    {
        @*var colors = Model.DistinctColourVariants;
        if (colors.Any())
        {
            <div class="color">
                <label for="variantColour">@Html.Sitecore().Text("/Catalog/Product Information/Color", "Color:")</label>
                <select class="form-control" name="Variant_Color" id="variantColor" onchange="VariantSelectionChanged()">
                    @foreach (var color in colors)
                    {
                        <option value="@color.ProductColor.GetHashCode()">@color.ProductColor</option>
                    }
                </select>
            </div>
        }*@
        //var colors = Model.DistinctColourVariants;
        if (Model.Variants != null)
        {
            <div id="C12-AddToCart" class="add-to-basket">
                @using (Ajax.BeginForm("AddKitCartLine", "Cart", null, new AjaxOptions { OnBegin = "SetAddButton", OnSuccess = "AddToCartSuccess", OnFailure = "AddToCartFailure", HttpMethod = "Post" }, new { id = "AddToCartForm" }))
                {
                    <div class="color">
                        <strong><label for="variantColour">@Model.Configuration</label></strong>
                        @*<label for="variantColour">@Html.Sitecore().Text("/Catalog/Product Information/Color", "Color:")</label>*@
                        <select class="form-control" name="Variant_Color" id="variantColor" onchange="VariantKitSelectionChanged()">
                            @foreach (var color in Model.Variants)
                            {
                                <option value="@color.ProductColor.GetHashCode()">@color.Title</option>
                            }
                        </select>
<br />
                        <div class="form-group">
                            <label class="control-label" for="Quantity">@Html.Sitecore().Text("Orders/Add To Cart/Quantity", Model.Configuration + " Quantity:")</label>
                            <div class="controls" id="quantity">
                                @Html.TextBoxFor(model => model.Quantity, new { type = "number", @class = "form-control", min = "1", max = "100", required = "required", Value = "1", onchange = "VariantKitSelectionChanged()" })
                                @Html.ValidationMessageFor(model => model.Quantity)
                            </div>
                            <br />
                            <br />
                            @*</div>*@

                            @if (Model.ProductRelationships != null)
                            {
                                var catalogItemList = new List<RelationshipViewModel>();


                                if (Model.ProductRelationships.RelatedProducts != null && Model.ProductRelationships.RelatedProducts.Count > 0)
                                {
                                    catalogItemList.AddRange(Model.ProductRelationships.RelatedProducts);
                                }

                                if (Model.ProductRelationships.RelatedCategories != null && Model.ProductRelationships.RelatedCategories.Count > 0)
                                {
                                    catalogItemList.AddRange(Model.ProductRelationships.RelatedCategories);
                                }

                                if (catalogItemList.Count == 0)
                                {
                                    return;
                                }

                                var kitCount = 0;

                                @Html.Hidden("KitCount", catalogItemList.Count);

                                foreach (var relationship in catalogItemList)
                                {
                                    @Html.Hidden("[" + kitCount.ToString() + "].ProductId", relationship.ChildProducts.FindLast(p => p != null).ProductId)
                                    @Html.Hidden("[" + kitCount.ToString() + "].VariantId", string.Empty)
                                    @Html.Hidden("[" + kitCount.ToString() + "].CatalogName", relationship.ChildProducts.FindLast(p => p != null).CatalogName)
                                    @Html.Hidden("[" + kitCount.ToString() + "].ProductUrl", relationship.ChildProducts.FindLast(p => p != null).ProductUrl)
                                    @Html.Hidden("[" + kitCount.ToString() + "].ImageUrl", relationship.ChildProducts.FindLast(p => p != null).GetThumbnailUrl(50))

                                    var kitVariantId = "[" + kitCount.ToString() + "].Variant_Color";
                                    var kitVariantQuantity = "[" + kitCount.ToString() + "].Quantity";
                                    <br />
                                    <br />
                                    <strong><h3 for="variantColour">@relationship.Description</h3></strong>
                                    <select class="form-control" name="@kitVariantId" id="@kitVariantId" onchange="VariantKitSelectionChanged()">
@*<select class="form-control" name="@relationship.ChildProducts.FindLast(p => p != null).ProductId + '_Variant_Color'" id="variantColor" onchange="KitVariantSelectionChanged()">*@

                                        @{
                                            foreach (var item in relationship.ChildProducts)
                                            {
                                                if (item is Sitecore.Feature.Commerce.Catalog.Website.Models.ProductViewModel)
                                                {
                                                    foreach (var color in ((Sitecore.Feature.Commerce.Catalog.Website.Models.ProductViewModel)item).Variants)
                                                    {
                                                        <option value="@color.ProductColor.GetHashCode()">@color.Title</option>
                                                    }
                                                }
                                            }
                                        }
                                    </select>
                                    <br />
                                    @*<div class="form-group">*@
                                            <label class="control-label" for="@kitVariantQuantity">@Html.Sitecore().Text("Orders/Add To Cart/Quantity", relationship.Description + " Quantity:")</label>
                                            <div class="controls" id="quantity">
                                                @Html.TextBox(@kitVariantQuantity, 1, new { type = "number", @class = "form-control", min = "1", max = "100", required = "required", Value = "1", onchange = "VariantKitSelectionChanged()" })
                                                @*@Html.TextBox("Test", new { type = "number", @class = "form-control", min = "1", max = "100", required = "required", Value = "1" })*@
                                                @*@Html.ValidationMessageFor(model => model.Quantity)*@
                                            </div>
                                                    kitCount++;
                                                }

                                            }
                        </div>

                    </div>

                    @Html.ValidationSummary(true)
                    @Html.HiddenFor(m => m.ProductId)
                    @Html.Hidden("VariantId", string.Empty)
                    @Html.HiddenFor(m => m.CatalogName)
                    @Html.HiddenFor(m => m.ProductUrl)
                    @Html.AntiForgeryToken()
                    @Html.Hidden("ImageUrl", Model.GetThumbnailUrl(50))
                    @*@Html.Hidden("SubLines", string.Empty)*@

                    @*<div class="form-group">
        <br />
        <label class="control-label" for="Quantity">@Html.Sitecore().Text("Orders/Add To Cart/Quantity", Model.Title + " Quantity:")</label>
        <div class="controls" id="quantity">
            @Html.TextBoxFor(model => model.Quantity, new { type = "number", @class = "form-control", min = "1", max = "100", required = "required", Value = "1" })
            @Html.ValidationMessageFor(model => model.Quantity)
        </div>
    </div>*@

                    <button id="AddToCartButton" type="submit" class="btn btn-success" onclick="VariantKitSelectionChanged()" data-loading-text="@Html.Sitecore().Text("Orders/Add To Cart/Adding To Cart", "Adding To Cart")">
                        @Html.Sitecore().Text("Orders/Add To Cart/Add To Cart", "Add To Cart")
                    </button>
                }
            </div>




 
        }
    }
    @if (Model.Variants != null && Model.Variants.Any())
    {
        var sizes = Model.Variants.Where(variant => !string.IsNullOrWhiteSpace(variant.Size)).Distinct(new VariantPropertiesEqualityComparer(VariantPropertiesComparisonProperty.Size));

        if (sizes.Any() && sizes.All(s => !string.IsNullOrEmpty(s.Size)))
        {
            <div class="size">
                <label for="variantSize">@Html.Sitecore().Text("/Catalog/Product Information/Size", "Size:")</label>
                <select class="form-control" name="Variant_Size" id="variantSize" onchange="VariantKitSelectionChanged()">
                    @foreach (var size in sizes)
                    {
                        <option value="@size.Size.GetHashCode()">@size.Size</option>
                    }
                </select>
            </div>
        }
    }

    @*@if (Model.Variants != null && Model.Variants.Any())
            {
<script type="text/javascript">
            $(document).ready(function () {
                VariantSelectionChanged();
            });
</script>
            }*@
</div>

<div class="modal fade" id="signForNotificationModal" tabindex="-1" role="dialog" aria-labelledby="signForNotificationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div id="signForNotificationModalMessages" class="wrap-error generic-error-handler" data-bind="visible: messages().shouldShowErrorList">
                <div class="container">
                    <div class="row">
                        <table>
                            <tbody data-bind="foreach: messages().errorList">
                            <tr>
                                <td>
                                    <p class="text-danger pull-left" pid=" errormessage" data-bind="text: errorMessage"></p>
                                </td>
                            </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="modal-header">
                <button type="button" class="close" data-bind="click: close">
                    <span aria-hidden="true">&times;</span><span class="sr-only">@Html.Sitecore().Text("/Catalog/Product Information/Close", "Close")</span>
                </button>
                <h2 class="modal-title" id="signForNotificationModalLabel">@Html.Sitecore().Text("/Catalog/Product Information/Sign up for notification", "Sign up for notification")</h2>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="user-name">@Html.Sitecore().Text("/Catalog/Product Information/Name", "Name:")</label>
                    <input type="text" class="form-control" id="user-name" placeholder="@Html.Sitecore().Text("/Catalog/Product Information/Enter Name", "Enter your name")" data-bind="value: fullName">
                </div>

                <div class="form-group">
                    <label for="user-email">@Html.Sitecore().Text("/Catalog/Product Information/Email", "E-mail:")</label>
                    <input type="text" class="form-control" id="user-email" placeholder="@Html.Sitecore().Text("/Catalog/Product Information/Enter Email", "Enter e-mail")" data-bind="value: email">
                </div>
                <div class="form-group">
                    <label for="user-confirm-email">@Html.Sitecore().Text("/Catalog/Product Information/Confirm Email", "Confirm E-mail:")</label>
                    <input type="text" class="form-control" id="user-confirm-email" placeholder="@Html.Sitecore().Text("/Catalog/Product Information/Enter Confirm Email", "Enter your e-mail again")" data-bind="value: confirmEmail">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="signForNotificationButton" data-loading-text="@Html.Sitecore().Text("/Catalog/Product Information/Signing Up", "Signing up...")" data-bind="click: signUp, enable: signUpEnable">
                    @Html.Sitecore().Text("/Catalog/Product Information/Sign up", "Sign up")
                </button>
                <button type="button" class="btn btn-default" aria-hidden="true" id="signForNotificationClose" data-bind="click: close">
                    @Html.Sitecore().Text("/Catalog/Product Information/Close", "Close")
                </button>
            </div>
        </div>
    </div>
</div>

<span id="InvalidVariant" style="display: none">@Html.Sitecore().Text("/Catalog/Product Information/Invalid Variant", "This combination is not valid")</span>

<script type="text/javascript">
    $(document).ready(function () {
        initProductPriceInfo('price-info');

        @{
            var percentLead = Html.Sitecore().Text("/Catalog/Product Information/Save percent lead", "- Save up to");
            if (Model.Variants != null && Model.Variants.Any())
            {
                foreach (var variant in Model.Variants)
                {
                    var savingsMessage = string.Empty;
                    if (variant.IsOnSale)
                    {
                        savingsMessage = percentLead + " " + variant.SavingsPercentage + "%";
                    }

                    var sizeValue = string.IsNullOrWhiteSpace(variant.Size) ? string.Empty : variant.Size.GetHashCode().ToString();
                    var colorValue = string.IsNullOrWhiteSpace(variant.ProductColor) ? string.Empty : variant.ProductColor.GetHashCode().ToString();

                    @:AddVariantCombination('@sizeValue', '@colorValue', '@variant.Id', '@variant.ListPrice.ToCurrency()', '@variant.AdjustedPrice.ToCurrency()', @variant.IsOnSale.ToString().ToLower(), '@savingsMessage');
                                        }

                if (Model.ProductRelationships != null)
                {
                    var catalogItemList = new List<RelationshipViewModel>();


                    if (Model.ProductRelationships.RelatedProducts != null && Model.ProductRelationships.RelatedProducts.Count > 0)
                    {
                        catalogItemList.AddRange(Model.ProductRelationships.RelatedProducts);
                    }

                    if (Model.ProductRelationships.RelatedCategories != null && Model.ProductRelationships.RelatedCategories.Count > 0)
                    {
                        catalogItemList.AddRange(Model.ProductRelationships.RelatedCategories);
                    }

                    if (catalogItemList.Count == 0)
                    {
                        return;
                    }

                    var kitCount = 0;


                    foreach (var relationship in catalogItemList)
                    {
                        var kitCountSelect = "[" + kitCount.ToString() + "].Variant_Color";
                        var kitCountQuantity = "[" + kitCount.ToString() + "].Quantity";
                        foreach (var item in relationship.ChildProducts)
                        {
                            if (item is Sitecore.Feature.Commerce.Catalog.Website.Models.ProductViewModel)
                            {
                                foreach (var color in ((Sitecore.Feature.Commerce.Catalog.Website.Models.ProductViewModel)item).Variants)
                                {
                                    var savingsMessage = string.Empty;
                                    var sizeValue = "";
                                    var colorValue = string.IsNullOrWhiteSpace(color.ProductColor) ? string.Empty : color.ProductColor.GetHashCode().ToString();

                                     @:AddVariantKitCombination('@kitCountSelect','@sizeValue', '@colorValue', '@color.Id', '@color.ListPrice.ToCurrency()', '@color.AdjustedPrice.ToCurrency()', @color.IsOnSale.ToString().ToLower(), '@savingsMessage');
                                }
                                kitCount++;
                            }
                        }
                    }
                    kitCount++;
                }

            }
            else
            {
                var savingsMessage = string.Empty;
                if (Model.IsOnSale)
                {
                    savingsMessage = percentLead + " " + Model.SavingsPercentage + "%";
                }

                @:switchProductPriceInfo('@Model.ListPriceWithCurrency', '@Model.AdjustedPriceWithCurrency', @Model.IsOnSale.ToString().ToLower(), '@savingsMessage');
                                                    }
        }
        VariantSelectionChanged();
        VariantKitSelectionChanged();
    });
</script>